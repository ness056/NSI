Les infos des pokemons sont stockés dans 2 endroits différents:
    Le dict pokemon_base qui contient en index le nom de chaque
    espèces de pokemon et en valeur les stats communes à tout les
    pokemons de ce type (types, evolution...). En suite les pokemons
    en eux même sont des dict avec leur stats spécifique à eu même
    (name, hp, attacks...)

attack -> dict(
    name,
    damage,
    type,
    precision
)

pokemon -> dict(
    name,
    specie,
    hp,
    level,
    xp,
    hp_max,
    attack,
    defense,
    speed,
    attacks: list[Attack]
)

pokemon_base -> dict(
    specie,
    max_hp_base,
    attack_base,
    defense_base,
    speed_base
    evo, (espèce du pokemon dans lequel il évolue ou None sinon)
    evo_level, (level auquel il évolue)
    types: list[str]
)

function damage_pokemon:
    parameters: pokemon, damage, damage_type
    regarde les types du pokemon et de l'attaque -> *2 ou /2 damage
    si hp <= 0 -> hp = 0 + mort
    si hp > max_hp -> hp = max_hp
    renvoie si pokemon mort

function gain_xp:
    parameters: pokemon, nombre xp

    ajoute xp au pokemon
    calcule xp required
    si xp >= xp required -> level +1 et xp = xp required - xp
    si level up ->
        calcule gains stats
        ajoute stats

    si pokemon atteint level d'évolution ->
        changer le pokemon

Les infos du joueur sont stockés dans un dict player -> (
    name: str
    inventory: dict(item_name, nombre d'item)
    badges: list[str]
    money: int
    pokemons: List[pokemon]
)
Le jeu va être construit sur une boucle principale while de laquelle
    on sort en mettant une variable exit à true. Au début de cette
    boucle on utilise la fonction input pour attendre avoir l'action
    du joueur, puis on fait l'action (ouvrir un menu, lancer une
    attaque...) et à la fin de la boucle on update l'écran.
    Chaque tour de boucle correspond à une action du joueur.

La console est en deux parties, dans la partie du haut on a la carte,
    les stats des pokemon en combat... En bas le menu, les dialog...



quand joueur écrit menu ->
    afficher le menu principal
    joueur sélectionne un menu
    affiche le menu sélectionné

liste pokemon ->
    affiche tout les pokemons de l'équipe
    joueur peut écrire le nom d'un pokemon pour voir les stats
    joueur peut écrire le nom + un nombre pour changer l'ordre

sac -> nombre de chaque objets

badges -> affiche liste des badges

pc ->
    affiche l'équipe et les pokemon stockés
    joueur peut prendre pokemon dans stockage ou en déposer

pokedex ->
    affiche tout les pokemon avec leur stats découvert du jeu
    point d’interrogation pour ceux pas découvert
    consulter la description/stats des pokemon


combat ->
    on a une variable qui dit si le combat est contre un pokemon sauvage
        ou un dresseur. 
    le premier pokemon de la list est le premier à ce battre, si il est mort
        c'est le second
    les pokemon entrain de se battre sont dans des variable spécifique
    quand un combat est en cours une variable "combat" est misse a true et
        la boucle principal va toujours dans le même if. Pour sortir du combat,
        il faut mettre la variable à false.
    on regarde quel pokemon a la plus grande vitesse, si ils ont la même
        vitesse, c'est celui du joueur
    la boucle appelle alternativement les fonctions qui 
        font jouer le joueur et l'ordi en fessant alterné une variable
    changer le pokemon du joueur/dresseur si leur pokemon meurt
    si plus de pokemon sortir du combat

    quand combat fini donner les potentiels recompense (argent, xp)

tour joueur ->
    affiche menu pour choisir quoi faire
    appeler la fonction qui correspond à l'action

menu attack -> affiche les attaques et les pp

menu changer pokemon -> affiche les autres pokemon avec leur stats

menu objet ->
    affiche les objets
    faire l'effet de l'item choisi
    si pokeball choisi et que capture réussi -> fin combat
        + ajouter le pokemon dans l'équipe/le pc
        + choisir nom

fuir combat -> sortir du combat

tour ordi -> choisir une attaque aléatoirement ou choisir un
    nouveau pokemon pour les dresseurs


carte ->

    cases:
        " ": case normal
        "m": mur
        "R": rocher
        "p": portail/porte/sortie
        "o": eau
        "h": haute herbe
        "d": dresseur
        "f": falaise
        "r": pierre
        "a": arbuste
        "I": infirmière
        "V": vendeur
        "N": pnj

    dict qui contient chaque zone
    chaque zone est une liste à 2 dimension
    chaque case est soit un str qui contient le char de son type
    certaines cases spécial qui ont des infos supplémentaires
        (portails, pnj...), sont décrite avec un tuple dont le
        premier index est le type de la case
    la position du joueur est décrite avec une liste qui a deux
        nombre, x et y, qui est dans le dictionnaire player
    pour déplacer le joueur on modifie les coordonnées
    si le joueur va sur une case de type p (portail) ->
        le joueur est téléporter dans la zone dans l'index 1 du tuple
        et à la position x, y des index 2 et 3
    pour afficher, ont a une fonction qui prend en paramètre la
        grille et la position du joueur. Elle parcours la liste
        avec deux for l'un dans l'autre et on print les char des cases
        sauf pour le sol normal où on peut marcher, pour ne pas trop
        encombré l'image. Aussi pour la case où se trouve le joueur
        où on affiche J. De plus la fonction pour afficher commence
        par effacer le contenue de la console.
    pour ce déplacer, le joueur peut écrire z,q,s,d pour se déplacer
        d'une case dans chaque direction, également il peut écrire
        une direction + un nombre pour se déplacer de plus case
        rapidement (ex: z5, q12). Quand le joueurs se déplace on 
        vérifie toutes les cases qui sont dans le chemin du joueur 
        avec une boucle en partant de la case la plus proche du
        joueur. Si une case n'est pas accessible (mur, falaise...),
        on déplace le joueur en modifiant ces coordonnées sur la
        dernière case accessible, puis on update l'écran.
    les pnj et dresseurs sont
    pour les pnj passifs, quand le joueur appuis sur e, on vérifie
        si une case collée à lui est un pnj, une infirmière ou
        un vendeur, si c'est une infirmière ou un vendeur on
        soigne les pokemon/on affiche le menu d'achat. Si c'est
        un pnj lambda, on affiche le texte dans le 2e index du tuple
    pour les dresseurs, a chaque fois que le joueur se déplace,
        on regarde avec 2 boucle si il y a un dresseur dans les
        cases avoisinantes et si oui on lance un combat.
        Avec les pokemons dans le 2e index du tuple
    pour les pierres/arbustes, quand le joueur appuis sur e,
        on regardes les cases collées à lui, si une d'elle est
        une pierre/un arbuste on boucle sur les pokemon du
        joueurs, puis sur leur attaques, si l'une d'entre elle
        est casse bric/coupe
    quand le joueur ce déplace sur une haute herbe, il y a une
    probabilité que un combat contre un pokemon sauvage démarre